/*
 * This file is generated by jOOQ.
*/
package org.cuber.upms.repo.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.async.AbstractAsyncVertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.cuber.upms.repo.tables.TRcRoleMenu;
import org.cuber.upms.repo.tables.records.TRcRoleMenuRecord;
import org.jooq.Configuration;


import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRcRoleMenuDao extends AbstractAsyncVertxDAO<TRcRoleMenuRecord, org.cuber.upms.repo.tables.pojos.TRcRoleMenu, Integer, Single<List<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>>, Single<Optional<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<TRcRoleMenuRecord,org.cuber.upms.repo.tables.pojos.TRcRoleMenu,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TRcRoleMenuDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(TRcRoleMenu.T_RC_ROLE_MENU, org.cuber.upms.repo.tables.pojos.TRcRoleMenu.class, new AsyncRXQueryExecutor<TRcRoleMenuRecord,org.cuber.upms.repo.tables.pojos.TRcRoleMenu,Integer>(delegate,org.cuber.upms.repo.tables.pojos.TRcRoleMenu::new, TRcRoleMenu.T_RC_ROLE_MENU), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(org.cuber.upms.repo.tables.pojos.TRcRoleMenu object) {
        return object.getRoleMenuId();
    }

    /**
     * Find records that have <code>role_id IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>> findManyByRoleId(List<Integer> values) {
        return findManyByCondition(TRcRoleMenu.T_RC_ROLE_MENU.ROLE_ID.in(values));
    }

    /**
     * Find records that have <code>menu_id IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>> findManyByMenuId(List<Integer> values) {
        return findManyByCondition(TRcRoleMenu.T_RC_ROLE_MENU.MENU_ID.in(values));
    }

    /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>> findManyByStatus(List<String> values) {
        return findManyByCondition(TRcRoleMenu.T_RC_ROLE_MENU.STATUS.in(values));
    }

    /**
     * Find records that have <code>operator IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>> findManyByOperator(List<String> values) {
        return findManyByCondition(TRcRoleMenu.T_RC_ROLE_MENU.OPERATOR.in(values));
    }

    /**
     * Find records that have <code>update_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>> findManyByUpdateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcRoleMenu.T_RC_ROLE_MENU.UPDATE_TIME.in(values));
    }

    /**
     * Find records that have <code>create_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRoleMenu>> findManyByCreateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcRoleMenu.T_RC_ROLE_MENU.CREATE_TIME.in(values));
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((Long)lastId).intValue());
    }
}
