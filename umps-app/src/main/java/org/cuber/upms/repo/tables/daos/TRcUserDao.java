/*
 * This file is generated by jOOQ.
*/
package org.cuber.upms.repo.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.async.AbstractAsyncVertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.cuber.upms.repo.tables.TRcUser;
import org.cuber.upms.repo.tables.records.TRcUserRecord;
import org.jooq.Configuration;


import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRcUserDao extends AbstractAsyncVertxDAO<TRcUserRecord, org.cuber.upms.repo.tables.pojos.TRcUser, Integer, Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>>, Single<Optional<org.cuber.upms.repo.tables.pojos.TRcUser>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<TRcUserRecord,org.cuber.upms.repo.tables.pojos.TRcUser,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TRcUserDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(TRcUser.T_RC_USER, org.cuber.upms.repo.tables.pojos.TRcUser.class, new AsyncRXQueryExecutor<TRcUserRecord,org.cuber.upms.repo.tables.pojos.TRcUser,Integer>(delegate,org.cuber.upms.repo.tables.pojos.TRcUser::new, TRcUser.T_RC_USER), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(org.cuber.upms.repo.tables.pojos.TRcUser object) {
        return object.getUserId();
    }

    /**
     * Find records that have <code>avatar IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByAvatar(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.AVATAR.in(values));
    }

    /**
     * Find records that have <code>user_name IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByUserName(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.USER_NAME.in(values));
    }

    /**
     * Find records that have <code>password IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByPassword(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.PASSWORD.in(values));
    }

    /**
     * Find records that have <code>salt IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyBySalt(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.SALT.in(values));
    }

    /**
     * Find records that have <code>full_name IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByFullName(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.FULL_NAME.in(values));
    }

    /**
     * Find records that have <code>birthday IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByBirthday(List<LocalDateTime> values) {
        return findManyByCondition(TRcUser.T_RC_USER.BIRTHDAY.in(values));
    }

    /**
     * Find records that have <code>user_scope IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByUserScope(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.USER_SCOPE.in(values));
    }

    /**
     * Find records that have <code>sex IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyBySex(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.SEX.in(values));
    }

    /**
     * Find records that have <code>email IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByEmail(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.EMAIL.in(values));
    }

    /**
     * Find records that have <code>phone IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByPhone(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.PHONE.in(values));
    }

    /**
     * Find records that have <code>ding_user_id IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByDingUserId(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.DING_USER_ID.in(values));
    }

    /**
     * Find records that have <code>wechat_user_id IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByWechatUserId(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.WECHAT_USER_ID.in(values));
    }

    /**
     * Find records that have <code>corp_number IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByCorpNumber(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.CORP_NUMBER.in(values));
    }

    /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByStatus(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.STATUS.in(values));
    }

    /**
     * Find records that have <code>operator IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByOperator(List<String> values) {
        return findManyByCondition(TRcUser.T_RC_USER.OPERATOR.in(values));
    }

    /**
     * Find records that have <code>update_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByUpdateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcUser.T_RC_USER.UPDATE_TIME.in(values));
    }

    /**
     * Find records that have <code>create_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcUser>> findManyByCreateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcUser.T_RC_USER.CREATE_TIME.in(values));
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((Long)lastId).intValue());
    }
}
