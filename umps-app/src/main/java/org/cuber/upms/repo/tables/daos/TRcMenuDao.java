/*
 * This file is generated by jOOQ.
*/
package org.cuber.upms.repo.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.async.AbstractAsyncVertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.cuber.upms.repo.tables.TRcMenu;
import org.cuber.upms.repo.tables.records.TRcMenuRecord;
import org.jooq.Configuration;


import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRcMenuDao extends AbstractAsyncVertxDAO<TRcMenuRecord, org.cuber.upms.repo.tables.pojos.TRcMenu, Integer, Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>>, Single<Optional<org.cuber.upms.repo.tables.pojos.TRcMenu>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<TRcMenuRecord,org.cuber.upms.repo.tables.pojos.TRcMenu,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TRcMenuDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(TRcMenu.T_RC_MENU, org.cuber.upms.repo.tables.pojos.TRcMenu.class, new AsyncRXQueryExecutor<TRcMenuRecord,org.cuber.upms.repo.tables.pojos.TRcMenu,Integer>(delegate,org.cuber.upms.repo.tables.pojos.TRcMenu::new, TRcMenu.T_RC_MENU), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(org.cuber.upms.repo.tables.pojos.TRcMenu object) {
        return object.getMenuId();
    }

    /**
     * Find records that have <code>code IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByCode(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.CODE.in(values));
    }

    /**
     * Find records that have <code>p_code IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByPCode(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.P_CODE.in(values));
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByName(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.NAME.in(values));
    }

    /**
     * Find records that have <code>url IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByUrl(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.URL.in(values));
    }

    /**
     * Find records that have <code>menu_type IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByMenuType(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.MENU_TYPE.in(values));
    }

    /**
     * Find records that have <code>menu_scope IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByMenuScope(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.MENU_SCOPE.in(values));
    }

    /**
     * Find records that have <code>level IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByLevel(List<Integer> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.LEVEL.in(values));
    }

    /**
     * Find records that have <code>sort IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyBySort(List<Integer> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.SORT.in(values));
    }

    /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByStatus(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.STATUS.in(values));
    }

    /**
     * Find records that have <code>operator IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByOperator(List<String> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.OPERATOR.in(values));
    }

    /**
     * Find records that have <code>update_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByUpdateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.UPDATE_TIME.in(values));
    }

    /**
     * Find records that have <code>create_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcMenu>> findManyByCreateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcMenu.T_RC_MENU.CREATE_TIME.in(values));
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((Long)lastId).intValue());
    }
}
