/*
 * This file is generated by jOOQ.
*/
package org.cuber.upms.repo.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.async.AbstractAsyncVertxDAO;

import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.Generated;

import org.cuber.upms.repo.tables.TRcRole;
import org.cuber.upms.repo.tables.records.TRcRoleRecord;
import org.jooq.Configuration;


import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.async.AsyncRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TRcRoleDao extends AbstractAsyncVertxDAO<TRcRoleRecord, org.cuber.upms.repo.tables.pojos.TRcRole, Integer, Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>>, Single<Optional<org.cuber.upms.repo.tables.pojos.TRcRole>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<TRcRoleRecord,org.cuber.upms.repo.tables.pojos.TRcRole,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public TRcRoleDao(Configuration configuration,io.vertx.reactivex.ext.asyncsql.AsyncSQLClient delegate) {
        super(TRcRole.T_RC_ROLE, org.cuber.upms.repo.tables.pojos.TRcRole.class, new AsyncRXQueryExecutor<TRcRoleRecord,org.cuber.upms.repo.tables.pojos.TRcRole,Integer>(delegate,org.cuber.upms.repo.tables.pojos.TRcRole::new, TRcRole.T_RC_ROLE), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(org.cuber.upms.repo.tables.pojos.TRcRole object) {
        return object.getRoleId();
    }

    /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByName(List<String> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.NAME.in(values));
    }

    /**
     * Find records that have <code>role_scope IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByRoleScope(List<String> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.ROLE_SCOPE.in(values));
    }

    /**
     * Find records that have <code>role IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByRole(List<String> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.ROLE.in(values));
    }

    /**
     * Find records that have <code>tips IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByTips(List<String> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.TIPS.in(values));
    }

    /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByStatus(List<String> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.STATUS.in(values));
    }

    /**
     * Find records that have <code>operator IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByOperator(List<String> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.OPERATOR.in(values));
    }

    /**
     * Find records that have <code>update_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByUpdateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.UPDATE_TIME.in(values));
    }

    /**
     * Find records that have <code>create_time IN (values)</code> asynchronously
     */
    public Single<List<org.cuber.upms.repo.tables.pojos.TRcRole>> findManyByCreateTime(List<LocalDateTime> values) {
        return findManyByCondition(TRcRole.T_RC_ROLE.CREATE_TIME.in(values));
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((Long)lastId).intValue());
    }
}
